name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # 允许手动触发

env:
  NODE_VERSION: '18.x'

jobs:
  # 代码质量检查
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint || echo "ESLint check completed"
        
      - name: Check TypeScript
        run: npx tsc --noEmit || echo "TypeScript check completed"

  # 构建和测试
  build:
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Check build output
        run: |
          if [ -d "dist" ]; then
            echo "Build successful - dist directory exists"
            ls -la dist/
          else
            echo "Build failed - dist directory not found"
            exit 1
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files-node-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

  # 创建发布包
  package:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files-node-18.x
          path: dist/
          
      - name: Create deployment package
        run: |
          cd dist
          tar -czf ../deployment-$(date +%Y%m%d-%H%M%S).tar.gz .
          ls -la ../deployment-*.tar.gz
          
      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-*.tar.gz
          retention-days: 30
          
      - name: Create release notes
        run: |
          echo "## Build Information" > release-notes.md
          echo "- Node.js Version: ${{ env.NODE_VERSION }}" >> release-notes.md
          echo "- Build Date: $(date)" >> release-notes.md
          echo "- Commit: ${{ github.sha }}" >> release-notes.md
          echo "- Branch: ${{ github.ref_name }}" >> release-notes.md
          
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 30

  # 部署到测试环境（可选）
  deploy-staging:
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ./
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Package contents:"
          tar -tzf deployment-*.tar.gz | head -20
          # 这里可以添加实际的部署命令
          # 例如：scp, rsync, 或者调用部署脚本

  # 部署到生产环境（可选）
  deploy-production:
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ./
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Package contents:"
          tar -tzf deployment-*.tar.gz | head -20
          # 这里可以添加实际的部署命令
          # 例如：scp, rsync, 或者调用部署脚本

  # 通知（可选）
  notify:
    runs-on: ubuntu-latest
    needs: [build, package]
    if: always()
    
    steps:
      - name: Notify build status
        run: |
          if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.package.result }}" == "success" ]; then
            echo "✅ Build and packaging completed successfully!"
          else
            echo "❌ Build or packaging failed!"
          fi
